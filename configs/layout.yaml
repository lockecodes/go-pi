directories:
  api:
    description: |
      # `/api`
  
      OpenAPI/Swagger specs, JSON schema files, protocol definition files.
  
      Examples:
  
      * https://github.com/kubernetes/kubernetes/tree/master/api
      * https://github.com/moby/moby/tree/master/api
    flags:
      - web
      - kitchen
  assets:
    description: |
      # `/assets`
  
      Other assets to go along with your repository (images, logos, etc).
    flags:
      - required
  build:
    __files__:
      .gitignore: |
        *
    flags:
      - required
  cmd:
    description: |
      # `/cmd`
  
      Main applications for this project.
  
      The directory name for each application should match the name of the executable you want to have
      (e.g., `/cmd/myapp`).
  
      Don't put a lot of code in the application directory. If you think the code can be imported and used in other
      projects, then it should live in the `/pkg` directory. If the code is not reusable or if you don't want others to
      reuse it, put that code in the `/internal` directory. You'll be surprised what others will do, so be explicit about
      your intentions!
  
      It's common to have a small `main` function that imports and invokes the code from the `/internal` and `/pkg`
      directories and nothing else.
  
      Examples:
  
      * https://github.com/vmware-tanzu/velero/tree/main/cmd (just a really small `main` function with everything else in packages)
      * https://github.com/moby/moby/tree/master/cmd
      * https://github.com/prometheus/prometheus/tree/main/cmd
      * https://github.com/influxdata/influxdb/tree/master/cmd
      * https://github.com/kubernetes/kubernetes/tree/master/cmd
      * https://github.com/dapr/dapr/tree/master/cmd
      * https://github.com/ethereum/go-ethereum/tree/master/cmd
    subDirectories:
      _your_app_:
        description: Directory contains the commands for the _your_app_ executable
        __files__:
          main.go: |
            package main
    flags:
      - required
  configs:
    description: |
      # `/configs`
    
      Configuration file templates or default configs.
      
      Put your `confd` or `consul-template` template files here.
    flags:
      - required
  deployments:
    description: |
      # `/deployments`
      
      IaaS, PaaS, system and container orchestration deployment configurations and templates (docker-compose,
      kubernetes/helm, mesos, terraform, bosh).
    flags:
      - web
      - kitchen
  docs:
    description: |
      # `/docs`
        
        Design and user documents (in addition to your godoc generated documentation).
      
      Examples:
        
        * https://github.com/gohugoio/hugo/tree/master/docs
        * https://github.com/openshift/origin/tree/master/docs
        * https://github.com/dapr/dapr/tree/master/docs
    flags:
      - required
  examples:
    description: |
      # `/examples`
        
        Examples for your applications and/or public libraries.
      
      Examples:
        
        * https://github.com/nats-io/nats.go/tree/master/examples
        * https://github.com/docker-slim/docker-slim/tree/master/examples
        * https://github.com/hashicorp/packer/tree/master/examples
    flags:
      - required
  githooks:
    description: |
      # `/githooks`
      
      Git hooks.
    flags:
      - hooks
      - kitchen
  init:
    description: |
      # `/init`
      
      System init (systemd, upstart, sysv) and process manager/supervisor (runit, supervisord) configs.
    flags:
      - init
      - kitchen
  internal:
    description: |
      # `/internal`
        
        Private application and library code. This is the code you don't want others importing in their applications or
        libraries. Note that this layout pattern is enforced by the Go compiler itself. See the Go 1.4
        [`release notes`](https://golang.org/doc/go1.4#internalpackages) for more details. Note that you are not limited to
        the top level `internal` directory. You can have more than one `internal` directory at any level of your project tree.
        
        You can optionally add a bit of extra structure to your internal packages to separate your shared and non-shared
        internal code. It's not required (especially for smaller projects), but it's nice to have visual clues showing the
        intended package use. Your actual application code can go in the `/internal/app` directory (e.g., `/internal/app/myapp`)
        and the code shared by those apps in the `/internal/pkg` directory (e.g., `/internal/pkg/myprivlib`).
      
      Examples:
        
        * https://github.com/hashicorp/terraform/tree/main/internal
        * https://github.com/influxdata/influxdb/tree/master/internal
        * https://github.com/perkeep/perkeep/tree/master/internal
        * https://github.com/jaegertracing/jaeger/tree/main/internal
        * https://github.com/moby/moby/tree/master/internal
        * https://github.com/satellity/satellity/tree/main/internal
        * https://github.com/minio/minio/tree/master/internal
      
      ## `/internal/pkg`
      
      Examples:
        
        * https://github.com/hashicorp/waypoint/tree/main/internal/pkg
    app:
      description: Internal application code. This would have a separate directory for each application (binary)
      _your_app_:
        description: The internal application code for the _your_app_ application
    pkg:
      description: The internal shared code. This would be imports in your app directories
      _your_private_lib_:
        description: A private internal library used in the internal applications
    flags:
      - required
  pkg:
    description: |
      # `/pkg`
        
        Library code that's ok to use by external applications (e.g., `/pkg/mypubliclib`). Other projects will import these
        libraries expecting them to work, so think twice before you put something here :-) Note that the `internal`
        directory is a better way to ensure your private packages are not importable because it's enforced by Go. The
        `/pkg` directory is still a good way to explicitly communicate that the code in that directory is safe for use by
        others. The [`I'll take pkg over internal`](https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/) blog
        post by Travis Jeffery provides a good overview of the `pkg` and `internal` directories and when it might make
        sense to use them.
      
      It's also a way to group Go code in one place when your root directory contains lots of non-Go components and
      directories making it easier to run various Go tools (as mentioned in these talks: [`Best Practices for Industrial
      Programming`](https://www.youtube.com/watch?v=PTE4VJIdHPg) from GopherCon EU 2018,
      [GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps](https://www.youtube.com/watch?v=oL6JBUk6tj0) and
      [GoLab 2018 - Massimiliano Pippi - Project layout patterns in Go](https://www.youtube.com/watch?v=3gQa1LWwuzk)).
        
        Note that this is not a universally accepted pattern and for every popular repo that uses it you can find 10 that
        don't. It's up to you to decide if you want to use this pattern or not. Regardless of whether or not it's a good
        pattern more people will know what you mean than not. It might a bit confusing for some of the new Go devs, but
        it's a pretty simple confusion to resolve and that's one of the goals for this project layout repo.
        
        Ok not to use it if your app project is really small and where an extra level of nesting doesn't add much value
        (unless you really want to). Think about it when it's getting big enough and your root directory gets pretty busy
        (especially if you have a lot of non-Go app components).
      
      The `pkg` directory origins: The old Go source code used to use `pkg` for its packages and then various Go projects
      in the community started copying the pattern (see [`this`](https://twitter.com/bradfitz/status/1039512487538970624)
      Brad Fitzpatrick's tweet for more context).
      
      
      Examples:
        
        * https://github.com/containerd/containerd/tree/main/pkg
        * https://github.com/slimtoolkit/slim/tree/master/pkg
        * https://github.com/telepresenceio/telepresence/tree/release/v2/pkg
        * https://github.com/jaegertracing/jaeger/tree/master/pkg
        * https://github.com/istio/istio/tree/master/pkg
        * https://github.com/GoogleContainerTools/kaniko/tree/master/pkg
        * https://github.com/google/gvisor/tree/master/pkg
        * https://github.com/google/syzkaller/tree/master/pkg
        * https://github.com/perkeep/perkeep/tree/master/pkg
        * https://github.com/heptio/ark/tree/master/pkg
        * https://github.com/argoproj/argo-workflows/tree/master/pkg
        * https://github.com/argoproj/argo-cd/tree/master/pkg
        * https://github.com/heptio/sonobuoy/tree/master/pkg
        * https://github.com/helm/helm/tree/master/pkg
        * https://github.com/k3s-io/k3s/tree/master/pkg
        * https://github.com/kubernetes/kubernetes/tree/master/pkg
        * https://github.com/kubernetes/kops/tree/master/pkg
        * https://github.com/moby/moby/tree/master/pkg
        * https://github.com/grafana/grafana/tree/master/pkg
        * https://github.com/influxdata/influxdb/tree/master/pkg
        * https://github.com/cockroachdb/cockroach/tree/master/pkg
        * https://github.com/derekparker/delve/tree/master/pkg
        * https://github.com/etcd-io/etcd/tree/master/pkg
        * https://github.com/oklog/oklog/tree/master/pkg
        * https://github.com/flynn/flynn/tree/master/pkg
        * https://github.com/jesseduffield/lazygit/tree/master/pkg
        * https://github.com/gopasspw/gopass/tree/master/pkg
        * https://github.com/sosedoff/pgweb/tree/master/pkg
        * https://github.com/GoogleContainerTools/skaffold/tree/master/pkg
        * https://github.com/knative/serving/tree/master/pkg
        * https://github.com/grafana/loki/tree/master/pkg
        * https://github.com/bloomberg/goldpinger/tree/master/pkg
        * https://github.com/Ne0nd0g/merlin/tree/master/pkg
        * https://github.com/jenkins-x/jx/tree/master/pkg
        * https://github.com/DataDog/datadog-agent/tree/master/pkg
        * https://github.com/dapr/dapr/tree/master/pkg
        * https://github.com/cortexproject/cortex/tree/master/pkg
        * https://github.com/dexidp/dex/tree/master/pkg
        * https://github.com/pusher/oauth2_proxy/tree/master/pkg
        * https://github.com/pdfcpu/pdfcpu/tree/master/pkg
        * https://github.com/weaveworks/kured/tree/master/pkg
        * https://github.com/weaveworks/footloose/tree/master/pkg
        * https://github.com/weaveworks/ignite/tree/master/pkg
        * https://github.com/tmrts/boilr/tree/master/pkg
        * https://github.com/kata-containers/runtime/tree/master/pkg
        * https://github.com/okteto/okteto/tree/master/pkg
        * https://github.com/solo-io/squash/tree/master/pkg
        * https://github.com/google/exposure-notifications-server/tree/main/pkg
        * https://github.com/spiffe/spire/tree/main/pkg
        * https://github.com/rook/rook/tree/master/pkg
        * https://github.com/buildpacks/pack/tree/main/pkg
        * https://github.com/cilium/cilium/tree/main/pkg
        * https://github.com/containernetworking/cni/tree/main/pkg
        * https://github.com/crossplane/crossplane/tree/master/pkg
        * https://github.com/dragonflyoss/Dragonfly2/tree/main/pkg
        * https://github.com/kubeedge/kubeedge/tree/master/pkg
        * https://github.com/kubevela/kubevela/tree/master/pkg
        * https://github.com/kubevirt/kubevirt/tree/main/pkg
        * https://github.com/kyverno/kyverno/tree/main/pkg
        * https://github.com/thanos-io/thanos/tree/main/pkg
        * https://github.com/cri-o/cri-o/tree/main/pkg
        * https://github.com/fluxcd/flux2/tree/main/pkg
        * https://github.com/kedacore/keda/tree/main/pkg
        * https://github.com/linkerd/linkerd2/tree/main/pkg
        * https://github.com/opencost/opencost/tree/develop/pkg
        * https://github.com/antrea-io/antrea/tree/main/pkg
        * https://github.com/karmada-io/karmada/tree/master/pkg
        * https://github.com/kuberhealthy/kuberhealthy/tree/master/pkg
        * https://github.com/submariner-io/submariner/tree/devel/pkg
        * https://github.com/trickstercache/trickster/tree/main/pkg
        * https://github.com/tellerops/teller/tree/master/pkg
        * https://github.com/OpenFunction/OpenFunction/tree/main/pkg
        * https://github.com/external-secrets/external-secrets/tree/main/pkg
        * https://github.com/ko-build/ko/tree/main/pkg
        * https://github.com/lima-vm/lima/tree/master/pkg
        * https://github.com/clastix/capsule/tree/master/pkg
        * https://github.com/carvel-dev/ytt/tree/develop/pkg
        * https://github.com/clusternet/clusternet/tree/main/pkg
        * https://github.com/fluid-cloudnative/fluid/tree/master/pkg
        * https://github.com/inspektor-gadget/inspektor-gadget/tree/main/pkg
        * https://github.com/sustainable-computing-io/kepler/tree/main/pkg
        * https://github.com/GoogleContainerTools/kpt/tree/main/pkg
        * https://github.com/guacsec/guac/tree/main/pkg
        * https://github.com/kubeovn/kube-ovn/tree/master/pkg
        * https://github.com/kube-vip/kube-vip/tree/main/pkg
        * https://github.com/kubescape/kubescape/tree/master/pkg
        * https://github.com/kudobuilder/kudo/tree/main/pkg
        * https://github.com/kumahq/kuma/tree/master/pkg
        * https://github.com/kubereboot/kured/tree/main/pkg
        * https://github.com/nocalhost/nocalhost/tree/main/pkg
        * https://github.com/openelb/openelb/tree/master/pkg
        * https://github.com/openfga/openfga/tree/main/pkg
        * https://github.com/openyurtio/openyurt/tree/master/pkg
        * https://github.com/getporter/porter/tree/main/pkg
        * https://github.com/sealerio/sealer/tree/main/pkg
        * https://github.com/werf/werf/tree/main/pkg

    _your_public_lib_:
      description: This will be an externally importable library
    flags:
      - required
  scripts:
    description: |
      # `/scripts`
        
        Scripts to perform various build, install, analysis, etc operations.
        
        These scripts keep the root level Makefile small and simple.
      
      Examples:
        
        * https://github.com/kubernetes/helm/tree/master/scripts
        * https://github.com/cockroachdb/cockroach/tree/master/scripts
        * https://github.com/hashicorp/terraform/tree/master/scripts
    flags:
      - required
  test:
    description: |
      # `/test`
        
        Additional external test apps and test data. Feel free to structure the `/test` directory anyway you want. For
        bigger projects it makes sense to have a data subdirectory. For example, you can have `/test/data` or
        `/test/testdata` if you need Go to ignore what's in that directory. Note that Go will also ignore directories or
        files that begin with "." or "_", so you have more flexibility in terms of how you name your test data directory.
      
      Examples:
        
        * https://github.com/openshift/origin/tree/master/test (test data is in the `/testdata` subdirectory)
    flags:
      - required
  third_party:
    description: |
      # `/third_party`
      
      External helper tools, forked code and other 3rd party utilities (e.g., Swagger UI).
    flags:
      - kitchen
      - third
  tools:
    description: |
      # `/tools`
        
        Supporting tools for this project. Note that these tools can import code from the `/pkg` and `/internal` directories.
      
      Examples:
        
        * https://github.com/istio/istio/tree/master/tools
        * https://github.com/openshift/origin/tree/master/tools
        * https://github.com/dapr/dapr/tree/master/tools
    flags:
      - kitchen
      - tools
  vendor:
    description: |
      # `/vendor`
      
      Application dependencies (managed manually or by your favorite dependency management tool or the built-in
      [`modules`](https://go.dev/wiki/Modules) feature).
      
      Don't commit your application dependencies if you are building a library.
      
      Note that since [`1.13`](https://golang.org/doc/go1.13#modules) Go also enabled the module proxy feature
      (using `https://proxy.golang.org` as their module proxy server by default). Read more about it
      [`here`](https://blog.golang.org/module-mirror-launch) to see if it fits all of your requirements and constraints.
      If it does, then you won't need the 'vendor' directory at all.
    flags:
      - kitchen
      - vendor
  web:
    description: |
      # `/web`
      
      Web application specific components: static web assets, server side templates and SPAs.
    app:
      description: web application code
    static:
      description: web static code
    templates:
      description: web templates
    flags:
      - web
      - kitchen
  website:
    description: |
      # `/website`
        
        This is the place to put your project's website data if you are not using GitHub pages.
      
      Examples:
        
        * https://github.com/hashicorp/vault/tree/master/website
        * https://github.com/perkeep/perkeep/tree/master/website
    flags:
      - kitchen
      - project
__files__:
  .gitignore: |
    # IntelliJ
    out/
    .idea/
    build/

    # CMake
    cmake-build-*/
  go.mod: |
    module github.com/YOUR-USER-OR-ORG-NAME/YOUR-REPO-NAME

    go 1.23

  Dockerfile: |
    FROM golang:1.23

    # Set destination for COPY
    WORKDIR /app

    # Download Go modules
    COPY go.mod go.sum ./
    RUN go mod download

    # Copy the source code. Note the slash at the end, as explained in
    # https://docs.docker.com/reference/dockerfile/#copy
    COPY api ./api/
    COPY assets ./assets/
    COPY cmd ./cmd/
    COPY configs ./configs/
    COPY init ./init/
    COPY internal ./internal/
    COPY pkg ./pkg/
    COPY vendor ./vendor/
    COPY web ./web/
    COPY website ./website/

    # Build
    RUN CGO_ENABLED=0 GOOS=linux go build -o /my-app

    # Optional:
    # To bind to a TCP port, runtime parameters must be supplied to the docker command.
    # But we can document in the Dockerfile what ports
    # the application is going to listen on by default.
    # https://docs.docker.com/reference/dockerfile/#expose
    EXPOSE 8080

    # Run
    CMD ["/my-app"]
  LICENSE.md: |
    license stuff here
  Makefile: |
    # note: call scripts from /scripts
  README.md: |
    # Standard Go Project Layout
